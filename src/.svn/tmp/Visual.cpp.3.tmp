#include "Visual.h"

bool SnapRotateRight = false;
bool SnapRotateLeft = false;
bool SnapRHForward = false;


//--------------------------------------------------------------
void Visual::setup(){

//	ofEnableSmoothing();
	kinectListener.setup();
<<<<<<< .mine
	ofAppBaseWindow * test = new ofAppBaseWindow();
	
	m_screenW = SCREEN_WIDTH;
	m_screenH = SCREEN_HEIGHT;
=======
		ofAppBaseWindow * test = new ofAppBaseWindow();
//		ofSetupOpenGL(test, SCREEN_WIDTH, SCREEN_HEIGHT, GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	m_screenW = SCREEN_WIDTH;
	m_screenH = SCREEN_HEIGHT;
>>>>>>> .r36
	int l;
	m_counter = 100;
	m_tCounterX = 	m_tCounterY = 	m_tCounterZ = m_counterX = m_counterY = m_counterZ  = 0;
	m_blockCreated = false;
	m_mousePressed_ = false;
<<<<<<< .mine
	m_mouseX = m_centerX = SCREEN_WIDTH / 2;
	m_mouseY = m_centerY = SCREEN_HEIGHT / 2;
	ofSetWindowPosition(m_screenW/2-(int)m_centerX, m_screenH/2 - (int)m_centerY);
=======
	m_mouseX = m_centerX = m_screenW / 2 ;
	m_mouseY = m_centerY = m_screenH / 2 ;
	ofSetWindowPosition(m_screenW/2-(int)m_centerX, m_screenH/2 - (int)m_centerY);
>>>>>>> .r36
	ofSetFrameRate(60);
<<<<<<< .mine
	ofBackground(0,0,0);
	
=======
	ofBackground(0,0,0);
//	ofEnableSmoothing();

>>>>>>> .r36
	m_CPressed = false;
	m_switchAxis = false;
	m_createdBlock = NULL;
	m_grabbedCreatedBlock = false;
	
	m_inst = new Instrument();
	//fglPolygonMode( GL_FRONT_AND_BACK, GL_FILL );
	m_inc = 0;
	
<<<<<<< .mine
	DEBUG = false;
	
	m_font.loadFont("verdana.ttf",  20);
=======
	DEBUG = false;
>>>>>>> .r36
}


//--------------------------------------------------------------
void Visual::update(){
	
	kinectListener.update();
	GestureDetect();
}

//--------------------------------------------------------------
void Visual::setupPerspective(){
	
	glViewport( 0, 0, m_screenW, m_screenH );
    // set the matrix mode to project
    glMatrixMode( GL_PROJECTION );
    // load the identity matrix
    glLoadIdentity();
    // create the viewing frustum
	// viewing angle, aspect ratio, nearest plane, farest plane 
    gluPerspective( 45.0, (GLfloat) m_screenW / (GLfloat) m_screenH, 1.0, 300 );
    // set the matrix mode to modelview
    glMatrixMode( GL_MODELVIEW );
    // load the identity matrix
    glLoadIdentity();
    // position the view point
    gluLookAt(0.0f, 0.0f,11, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f );
}

<<<<<<< .mine
//--------------------------------------------------------------
void Visual::drawInstrument()
{
	ofPushMatrix();
	float blockX;
	float blockY;
	float blockSize;
	Block * block;
	for (int i = 0; i< m_inst->getNumBlock(); i++)
	{
		block = m_inst->getBlock(i);
		blockX = block->getPointX();
		blockY = block->getPointY();
		blockSize = block->getSize();
		
		//		ofTranslate(block->getPointX(), block->getPointY(), block->getPointZ());
		
		ofSetColor(150,50,150,255);
		ofNoFill();
		ofRect(blockX - blockSize/2, blockY - blockSize/2, blockSize-3,blockSize-3);
		ofSetColor(50,0,50,150);
		ofFill();
		ofRect(blockX - blockSize/2, blockY - blockSize/2, blockSize,blockSize);
		
	} 
	
	if ( m_grabbedCreatedBlock)
	{
		float x = m_mouseX;
		float y = m_mouseY;
		float z = LOWLEVEL_Z;
		
		m_inst->findNearestEmptySpot(&x, &y, &z, &m_foundRow, &m_foundCol);
		ofSetColor(255,100,255,255 * 0.5);
		ofNoFill();
		ofRect(x - DEFAULT_SIZE/2,y - DEFAULT_SIZE/2, DEFAULT_SIZE-3,DEFAULT_SIZE-3);
		ofSetColor(100,0,100,150 * 0.5);
		ofFill();
		ofRect(x - DEFAULT_SIZE/2,y - DEFAULT_SIZE/2,DEFAULT_SIZE,DEFAULT_SIZE);
		
	}
	ofPopMatrix();
}
=======
void Visual::setupPerspective(){
   
	glViewport( 0, 0, m_screenW, m_screenH );
    // set the matrix mode to project
    glMatrixMode( GL_PROJECTION );
    // load the identity matrix
    glLoadIdentity();
    // create the viewing frustum
	// viewing angle, aspect ratio, nearest plane, farest plane 
    gluPerspective( 45.0, (GLfloat) m_screenW / (GLfloat) m_screenH, 1.0, 300 );
    // set the matrix mode to modelview
    glMatrixMode( GL_MODELVIEW );
    // load the identity matrix
    glLoadIdentity();
    // position the view point
    gluLookAt(0.0f, 0.0f,11, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f );
}
>>>>>>> .r36

<<<<<<< .mine
//--------------------------------------------------------------
=======
void Visual::drawInstrument()
{
	ofPushMatrix();
	float blockX;
	float blockY;
	float blockSize;
	Block * block;
	for (int i = 0; i< m_inst->getNumBlock(); i++)
	{
		block = m_inst->getBlock(i);
		blockX = block->getPointX();
		blockY = block->getPointY();
		blockSize = block->getSize();
		
//		ofTranslate(block->getPointX(), block->getPointY(), block->getPointZ());
		
		ofSetColor(150,50,150,255);
		ofNoFill();
		ofRect(blockX - blockSize/2, blockY - blockSize/2, blockSize-3,blockSize-3);
		ofSetColor(50,0,50,150);
		ofFill();
		ofRect(blockX - blockSize/2, blockY - blockSize/2, blockSize,blockSize);

	}
	
	if ( m_grabbedCreatedBlock)
	{
		float x = m_mouseX;
		float y = m_mouseY;
		float z = LOWLEVEL_Z;

		m_inst->findNearestEmptySpot(&x, &y, &z, &m_foundRow, &m_foundCol);
		ofSetColor(255,100,255,255 * 0.5);
		ofNoFill();
		ofRect(x - DEFAULT_SIZE/2,y - DEFAULT_SIZE/2, DEFAULT_SIZE-3,DEFAULT_SIZE-3);
		ofSetColor(100,0,100,150 * 0.5);
		ofFill();
		ofRect(x - DEFAULT_SIZE/2,y - DEFAULT_SIZE/2,DEFAULT_SIZE,DEFAULT_SIZE);
		
	}
	ofPopMatrix();
}

>>>>>>> .r36
void Visual::drawCreatedBlock(Block * block){
	
	ofPushMatrix();

<<<<<<< .mine
	float blockX = block->getPointX();
	float blockY =  block->getPointY();
	float blockZ = block->getPointZ();
	float blockSize = block->getSize();
=======
	ofPushMatrix();
>>>>>>> .r36
	
	glTranslatef(blockX, blockY, blockZ);
	
<<<<<<< .mine
=======
	float blockX = block->getPointX();
	float blockY =  block->getPointY();
	float blockZ = block->getPointZ();
	float blockSize = block->getSize();

	glTranslatef(blockX, blockY, blockZ);
	
	// AVI		
>>>>>>> .r36
	if ( m_tCounterY > m_counterY ) 
		m_counterY += ROTATE_UNIT;
	else if ( m_tCounterY < m_counterY ) 
		m_counterY -= ROTATE_UNIT;
	else 
		m_counterY = m_tCounterY = 0;
	if ( m_tCounterX > m_counterX ) 
		m_counterX += ROTATE_UNIT;
	else if ( m_tCounterX < m_counterX) 
		m_counterX -= ROTATE_UNIT;
	else 
		m_counterX = m_tCounterX = 0;
	if ( m_tCounterZ > m_counterZ ) 
		m_counterZ += ROTATE_UNIT;
	else if ( m_tCounterZ < m_counterZ) 
		m_counterZ -= ROTATE_UNIT;
	else 
		m_counterZ = m_tCounterZ = 0;
	
	ofRotateX(m_counterX);
	ofRotateY(m_counterY);
	ofRotateZ(m_counterZ);
	ofSetColor(100,0,100,100);
	glutSolidCube(blockSize);
	ofSetColor(255,100,255);
	glutWireCube(blockSize+2);
	
	char buffer [3];
	sprintf(buffer, "%d", m_pressedKey);
	glLineWidth(2.0);
	
	ofSetColor(255,0,100,255);	
	if (DEBUG)drawString(0,0,50,buffer,1);
	
	ofPopMatrix();
<<<<<<< .mine
	
=======
>>>>>>> .r36
}
//--------------------------------------------------------------
void Visual::drawChordBookNear(Block * block)
{
	
	ofPushMatrix();
	float blockX = block->getPointX();
	float blockY =  block->getPointY();
	float blockZ = block->getPointZ();
	float blockSize = block->getSize();
	float offsetY = 50;
	string chord[5] = {"Am", "G", "D", "C", "Em"};
	for (int i = 0; i < 5 ; i++ ) {
		int k = (i + m_counter ) %5; // r abs((i + (m_counter%5))%5);
		float pos = -2* blockSize+ i * blockSize ;
		ofSetColor(30,30,30,125 + 255 * - 0.25 * ( abs(i - 2) - 2) );	
		ofRect(blockX + pos - blockSize/2,blockY+ offsetY,blockSize, blockSize);
		ofSetColor(100,100,100,125 + 255 * - 0.25 * ( abs(i - 2) - 2));	
		m_font.loadFont("verdana.ttf",  block->getSize()/3);
		m_font.drawString(chord[k], blockX + pos -blockSize/2 + 5 ,blockY + offsetY+ blockSize/2);
		ofSetColor(0xff3399);
	}
	ofPopMatrix();
}

//--------------------------------------------------------------
void Visual::draw(){
<<<<<<< .mine

	ofEnableSmoothing();
	if ( DEBUG)kinectListener.draw();

	DrawCursors();
=======
	ofEnableSmoothing();
	if ( DEBUG)kinectListener.draw();
>>>>>>> .r36
	
<<<<<<< .mine
	//	setupPerspective();
	ofSetColor(255,100,255,255);
	m_font.drawString("crossole : crosspuzzle of sound", 10,22);
	
	ofSetColor(0,0,0,255);
	
=======
//	setupPerspective();
	ofSetColor(255,100,255,255);
	m_font.loadFont("verdana.ttf",  20);
	m_font.drawString("crossole : crosspuzzle of sound", 10,22);
//	m_font.drawString("crossole : crosspuzzle of sound", 98,98);
	ofSetColor(0,0,0,255);
//	m_font.drawString("crossole : crosspuzzle of sound", 8,18);	
>>>>>>> .r36
	GLfloat ambientLight[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);
	drawInstrument();
	if ( m_blockCreated )
<<<<<<< .mine
	{
		// If we are in the placement state, set mouse coords
		// to the RH coords;
		if (m_grabbedCreatedBlock)
		{
			m_mouseX = kinectListener.GetCoords(R_HAND, X_dim)*SCREEN_WIDTH+SCREEN_WIDTH/2;
			m_mouseY = kinectListener.GetCoords(R_HAND, Y_dim)*SCREEN_HEIGHT+SCREEN_HEIGHT/2;
		}
		m_createdBlock->setPoint(m_mouseX, m_mouseY- DEFAULT_SIZE/2, HIGHLEVEL_Z); // if mouse is dragged
		
		drawCreatedBlock(m_createdBlock);
=======
	{	
		m_createdBlock->setPoint(m_mouseX, m_mouseY- DEFAULT_SIZE/2, HIGHLEVEL_Z); // if mouse is dragged

		drawCreatedBlock(m_createdBlock);
>>>>>>> .r36
		if ( m_CPressed)
<<<<<<< .mine
			drawChordBookNear(m_createdBlock);
=======
			drawChordBookNear(m_createdBlock);
		
>>>>>>> .r36
	}
	
}

<<<<<<< .mine
//--------------------------------------------------------------
void Visual::DrawCursors()
{
	// If there's no block put a red square
	// that shows right hand position
	if (!m_blockCreated)
	{
		ofSetColor(255, 0, 0);
		ofFill();
		ofRect(kinectListener.GetCoords(R_HAND, X_dim)*SCREEN_WIDTH+SCREEN_WIDTH/2, kinectListener.GetCoords(R_HAND, Y_dim)*SCREEN_HEIGHT+SCREEN_HEIGHT/2, 5, 5);
	}
	
	// At all times, show a green square for left hand
	ofSetColor(0, 255, 0);
	ofFill();
	ofRect(kinectListener.GetCoords(L_HAND, X_dim)*SCREEN_WIDTH+SCREEN_WIDTH/2, kinectListener.GetCoords(L_HAND, Y_dim)*SCREEN_HEIGHT+SCREEN_HEIGHT/2, 5, 5);
=======

>>>>>>> .r36
}

//--------------------------------------------------------------
//  Basic Controls demo
void Visual::GestureDetect()
{	
	// 2. Rotate block using R-H position
	// 2.a. Rotate Right
	if (kinectListener.DetectSnap(R_HAND, X_dim, 0.4, &SnapRotateRight)) 
	{
		if ((m_blockCreated) && (!m_grabbedCreatedBlock) && (m_CPressed))
		{
			m_tCounterY =(m_tCounterY + 90);
			m_counter ++;
			if ( m_tCounterY <360 )
			{	
				m_tCounterY += 360;
				m_counterY += 360;
			}
		}
	}
		
	// 2.b. Rotate Left
	if (kinectListener.DetectSnap(R_HAND, X_dim, -0.2, &SnapRotateLeft)) 
	{
		if ((m_blockCreated) && (!m_grabbedCreatedBlock) && (m_CPressed))
		{
			m_tCounterY =(m_tCounterY - 90);
			if ( m_tCounterY >=360 )
			{	
				m_tCounterY -= 360;
				m_counterY -= 360;
			}
			m_counter --;
		}
	}

	if (kinectListener.DetectSnap(R_HAND, Z_dim, -0.5, &SnapRHForward)) 
	{
		if (m_blockCreated)
		{
			// 4. After placing, snap RH forward to finalize pos
			// and add block to instrument
			
			if ( m_blockCreated && m_grabbedCreatedBlock ) 
			{
				// TODO : add block to the Instrument
				if  (m_inst->getNumBlock() == 0)
				{
					m_createdBlock->setPoint(kinectListener.GetCoords(R_HAND, X_dim)*SCREEN_WIDTH+SCREEN_WIDTH/2, kinectListener.GetCoords(R_HAND, Y_dim)*SCREEN_HEIGHT+SCREEN_HEIGHT/2, LOWLEVEL_Z);
					if ( !m_inst->addFirstBlock(m_createdBlock))
						cout<< "The Block was not created succesfully\n";
				}
				else 
				{
					m_inc++;
					if ( !m_inst->addBlock(m_foundRow,m_foundCol, m_createdBlock) ) 
						cout<< "The Block was not created succesfully\n";
					cout<<"Num Block:" << m_inst->getNumBlock()<<"\n";
				}
				m_blockCreated = false;
				m_grabbedCreatedBlock = false;
				m_mouseX = m_centerX = m_screenW / 2;
				m_mouseY = m_centerY = m_screenH / 2;
			}
			else 
			{
				// 3. If block has been created, then go from rotate state
				// to placement by snapping RH forward.
				
				m_mouseX = kinectListener.GetCoords(R_HAND, X_dim)*SCREEN_WIDTH+SCREEN_WIDTH/2;
				m_mouseY = kinectListener.GetCoords(R_HAND, Y_dim)*SCREEN_HEIGHT+SCREEN_HEIGHT/2;
				m_grabbedCreatedBlock = true;
				
				m_CPressed = false;
			}
		}
		else 
		{
			// 1. If no block has been created, create block
			// by snapping RH forward
			// Also opens chord book - then switches to rotate.
			m_blockCreated = true;
			m_createdBlock = new Block();
			m_CPressed = true;
		}
	}
}

//--------------------------------------------------------------
void Visual::keyPressed(int key){
	m_pressedKey = key;
	if ( key == 358) 
	{
		m_tCounterY =(m_tCounterY + 90);
		m_counter --;
	}
	else if ( key  == 356 ) 
	{
		m_tCounterY =(m_tCounterY - 90);
		m_counter ++;
	}
	else if ( key == 357 )
<<<<<<< .mine
	{
		m_tCounterX =(m_tCounterX + 90);
=======
	{
			m_tCounterX =(m_tCounterX + 90);
	}
>>>>>>> .r36
	}
	else if (key == 359) 
	{
		m_tCounterX =(m_tCounterX - 90);
	}
	else if (key == 99)
<<<<<<< .mine
	{
		if ( !m_blockCreated)
		{
			m_blockCreated = true;
			m_createdBlock = new Block();
		}
	}
=======
	{
		if ( ! m_blockCreated)
		{
			m_blockCreated = true;
			m_createdBlock = new Block();
		}
	}
>>>>>>> .r36
	else if (key == 32)
<<<<<<< .mine
		m_CPressed = !m_CPressed;
	else if ( key == 100)
		DEBUG = !DEBUG;
	else if (key == 102)
		ofToggleFullscreen();	
=======
		m_CPressed = !m_CPressed;
	else if ( key == 100)
		DEBUG = !DEBUG;
	else if (key == 102)
		ofToggleFullscreen();

	
>>>>>>> .r36
}

//--------------------------------------------------------------
void Visual::keyReleased(int key){
}

//--------------------------------------------------------------
void Visual::mouseMoved(int x, int y ){
	
}

//--------------------------------------------------------------
void Visual::mouseDragged(int x, int y, int button){
	if ( m_grabbedCreatedBlock )
	{
		m_mouseX = x;
		m_mouseY = y;
	}
}

//--------------------------------------------------------------
void Visual::mousePressed(int x, int y, int button){
	m_mousePressed_= true;
	
	if ( m_blockCreated  ) 
	{
		if ( distance( m_createdBlock->getPointX(), m_createdBlock->getPointY(), x, y) < m_createdBlock->getSize() ) 
		{
			m_mouseX = x;
			m_mouseY = y;
			m_grabbedCreatedBlock = true;
		}
	}
}

//--------------------------------------------------------------
float Visual:: distance(float x1, float y1, float x2, float y2)
{
	return (float)sqrt(pow((x1-x2),2) + pow(y1-y2,2));
}

//--------------------------------------------------------------
void Visual::mouseReleased(int x, int y, int button){
<<<<<<< .mine
	if ( m_blockCreated && m_grabbedCreatedBlock ) 
	{
		// TODO : add block to the Instrument
		if  (m_inst->getNumBlock() == 0){
			m_createdBlock->setPoint(m_mouseX, m_mouseY, LOWLEVEL_Z);
			if ( !m_inst->addFirstBlock(m_createdBlock))
				cout<< "The Block was not created succesfully\n";
			
		}
		else {
			m_inc++;
			if ( !m_inst->addBlock(m_foundRow,m_foundCol, m_createdBlock) ) 
				cout<< "The Block was not created succesfully\n";
			cout<<"Num Block:" << m_inst->getNumBlock()<<"\n";
		}
		m_blockCreated = false;
		m_grabbedCreatedBlock = false;
		m_mouseX = m_centerX = m_screenW / 2;
		m_mouseY = m_centerY = m_screenH / 2;
	}
=======
	if ( m_blockCreated && m_grabbedCreatedBlock ) 
	{
		// TODO : add block to the Instrument
		if  (m_inst->getNumBlock() == 0){
			m_createdBlock->setPoint(m_mouseX, m_mouseY, LOWLEVEL_Z);
			if ( !m_inst->addFirstBlock(m_createdBlock))
			cout<< "The Block was not created succesfully\n";

		}
		else {
			m_inc++;
			if ( !m_inst->addBlock(m_foundRow,m_foundCol, m_createdBlock) ) 
				cout<< "The Block was not created succesfully\n";
			cout<<"Num Block:" << m_inst->getNumBlock()<<"\n";
		}
		m_blockCreated = false;
		m_grabbedCreatedBlock = false;
		m_mouseX = m_centerX = m_screenW / 2;
		m_mouseY = m_centerY = m_screenH / 2;
	}
>>>>>>> .r36
}

//--------------------------------------------------------------
void Visual::windowResized(int w, int h){
	
}

void Visual::drawString( GLfloat x, GLfloat y, GLfloat z, string str, GLfloat scale = 1.0f )
{
    GLint len = str.length(), i;
	// line width    glScalef( .001f * scale, .001f * scale, .001f * scale );
  	ofDrawBitmapString(str, x,y);
}

float Visual:: distance(float x1, float y1, float x2, float y2)
{
	return (float)sqrt(pow((x1-x2),2) + pow(y1-y2,2));
}

void Visual::createBlock()
{
	
<<<<<<< .mine
}

Visual::~Visual()
{
	cout<<"visual destructor start\n";
	delete m_inst;
	cout<<"visual destructor end\n";
}
=======
}

Visual::~Visual()
{
	cout<<"visual destructor start\n";
	delete m_inst;
	cout<<"visual destructor end\n";
}
			
			
>>>>>>> .r36
